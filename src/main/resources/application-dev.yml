#这个是开发环境的配置文件


spring: 
  main: 
    allow-bean-definition-overriding: true
    
  data:
    #mongodb配置
    mongodb:
      host: localhost
      port: 27017
      database: test
      
    #ElasticSearch配置
    elasticsearch:
      #ElasticSearch集群名称
      cluster-name: darcy-search
      #ElasticSearch集群服务地址，可以多个
      cluster-nodes: localhost:9300
      #设置连接超时时间
      properties.transport.tcp.connect_timeout: 120s
      
  #数据源配置（多数据源）
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    # 下面为连接池的补充设置，应用到上面所有数据源中
    # 初始化大小，最小，最大
    initialSize: 5
    minIdle: 5
    maxActive: 20
    # 配置获取连接等待超时的时间
    maxWait: 60000
    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    timeBetweenEvictionRunsMillis: 60000
    # 配置一个连接在池中最小生存的时间，单位是毫秒
    minEvictableIdleTimeMillis: 300000
    # 校验SQL，Oracle配置 validationQuery: SELECT 1 FROM DUAL，如果不配validationQuery项，则下面三项配置无用
    validationQuery: SELECT 'x'
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    # 打开PSCache，并且指定每个连接上PSCache的大小
    poolPreparedStatements: true
    maxPoolPreparedStatementPerConnectionSize: 20
    # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
    filters: stat,wall,log4j
    # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
    # 合并多个DruidDataSource的监控数据
    useGlobalDataSourceStat: true
    # Spring监控配置，说明请参考Druid Github Wiki，配置_Druid和Spring关联监控配置
    #druid: 
      #aop-patterns: cn.smarthse.business.service.*,cn.smarthse.admin.service.* # Spring监控AOP切入点，如x.y.z.service.*,配置多个英文逗号分隔
      #aop-proxy-target-class: true
      #web-stat-filter.enabled: true  #是否启用StatFilter默认值true
      #stat-view-servlet.enabled: true  #是否启用StatViewServlet默认值true
  
    # 默认数据源
    url: jdbc:mysql://localhost:3306/DemoSystem?serverTimezone=Asia/Shanghai&zeroDateTimeBehavior=convertToNull
    username: root
    password: 123456
    #localhost
    #url: jdbc:mysql://localhost:3306/DemoSystem?serverTimezone=Asia/Shanghai
    #username: root
    #password: 123456
      
    # 1.Master datasource config 读写
    master:
      name: master
      url: jdbc:mysql://localhost/product_master?serverTimezone=Asia/Shanghai
      port: 3306
      username: root
      password: 123456
    # 2.SlaveAlpha datasource config 读
    slave1:
      name: SlaveAlpha
      url: jdbc:mysql://localhost/product_slave_alpha?serverTimezone=Asia/Shanghai
      port: 3306
      username: root
      password: 123456
    # 3.SlaveBeta datasource config 读
    slave2:
      name: SlaveBeta
      url: jdbc:mysql://localhost/product_slave_beta?serverTimezone=Asia/Shanghai
      port: 3306
      username: root
      password: 123456
    # 4.SlaveGamma datasource config 读
    slave3:
      name: SlaveGamma
      url: jdbc:mysql://localhost/product_slave_gamma?serverTimezone=Asia/Shanghai
      port: 3306
      username: root
      password: 123456
       
  #redis缓存配置
  redis:
    #是否启用redis缓存服务
    cacheable: false
    #redis单机节点 JedisConnectionFactory
    host: 192.168.1.111
    port: 6379
    password: hello_redis
    #redis集群节点：RedisNode
    cluster: 
      #是否启用redis集群
      clusterable: false
      nodes: 127.0.0.1:7001,127.0.0.1:7002,127.0.0.1:7003
      timeout: 2000
      max-redirects: 8
    jedis:
      pool:
        min-idle: 1
        max-idle: 1
        max-wait:


#kafka配置信息
kafka:
  producer:
    bootstrap-servers: 192.168.1.144:9093,192.168.1.144:9094,192.168.1.144:9095
    batch-size: 16785                                   #一次最多发送数据量
    retries: 1                                          #发送失败后的重复发送次数
    buffer-memory: 33554432                             #32M批处理缓冲区
    linger: 1
  consumer:
    group-id: test-consumer-group
    bootstrap-servers: 192.168.1.144:9093,192.168.1.144:9094,192.168.1.144:9095
    auto-offset-reset: latest                           #最早未被消费的offset earliest
    max-poll-records: 3100                              #批量消费一次最大拉取的数据量
    enable-auto-commit: false                           #是否开启自动提交
    auto-commit-interval: 1000                          #自动提交的间隔时间
    session-timeout: 20000                              #连接超时时间
    max-poll-interval: 15000                            #手动提交设置与poll的心跳数,如果消息队列中没有消息，等待毫秒后，调用poll()方法。如果队列中有消息，立即消费消息，每次消费的消息的多少可以通过max.poll.records配置。
    max-partition-fetch-bytes: 15728640                 #设置拉取数据的大小,15M
  listener:
    batch-listener: true                                #是否开启批量消费，true表示批量消费
    concurrencys: 3,6                                   #设置消费的线程数
    poll-timeout: 1500                                  #只限自动提交
    topics: topic_1,topic_2,topic_3

#阿里云oss配置
oss:
  endpoint: http://oss-cn-hangzhou.aliyuncs.com
  accesskey: LTAIH6Jwysni9i5M
  accesssecret: B13HsuDlPuQvGacfKAVXH5k5C4dhgI
  bucketname: yanfa-oss-file1
  callback: http://hc19395088.iask.in/tool/file/callback

cache:
    memcached-connection-pool-size: 1
    memcached-failure-mode: true
    memcached-server1-host: 127.0.0.1
    memcached-server1-port: 11211
    memcached-server1-weight: 1    


security:
  oauth2:
    client:
      clientId: bd1c0a783ccdd1c9b9e4
      clientSecret: 1a9030fbca47a5b2c28e92f19050bb77824b5ad1
      accessTokenUri: https://github.com/login/oauth/access_token
      userAuthorizationUri: https://github.com/login/oauth/authorize     
      tokenName: oauth_token
      authenticationScheme: query
      clientAuthenticationScheme: form
    resource:
      userInfoUri: https://graph.facebook.com/me

facebook:
  client:
    clientId: 233668646673605
    clientSecret: 33b17e044ee6a4fa383f46ec6e28ea1d
    accessTokenUri: https://graph.facebook.com/oauth/access_token
    userAuthorizationUri: https://www.facebook.com/dialog/oauth
    tokenName: oauth_token
    authenticationScheme: query
    clientAuthenticationScheme: form
  resource:
    userInfoUri: https://api.github.com/user
    
github:
  client:
    clientId: bd1c0a783ccdd1c9b9e4
    clientSecret: 1a9030fbca47a5b2c28e92f19050bb77824b5ad1
    accessTokenUri: https://github.com/login/oauth/access_token
    userAuthorizationUri: https://github.com/login/oauth/authorize
    clientAuthenticationScheme: form
  resource:
    userInfoUri: https://api.github.com/user